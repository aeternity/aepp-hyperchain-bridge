@compiler >= 6

include "Pair.aes"
include "List.aes"
include "String.aes"
include "./FungibleToken.aes"

/// @title Bridge contract for Hyperchains
/// @notice This contract allows users to bridge tokens between Aeternity chains
/// @author Yusuf Seyrek (seyrek91@gmail.com)
/// @dev 
payable main contract HyperchainBridge = 
  record state = {
    operator        : address,
    token_ref       : FungibleToken, 
    token_links     : list(token_link),
    bridge_entries  : list(bridge_entry),
    processed_exits : list(exit_request) }

  datatype token_type = Native | Link | Standard

  record bridge_entry = {
    idx             : int,
    from            : address,
    token           : option(FungibleToken),
    amount          : int,
    exit_link       : option(token_link),
    token_type      : token_type,
    target_network  : network }

  record exit_request = {
    entry           : bridge_entry,
    entry_tx_hash   : string,
    entry_network   : network,
    entry_token_meta: token_meta }

  record token_link = {
    local_token       : FungibleToken,
    source_token      : option(FungibleToken),
    source_network    : network, 
    is_source_native  : bool }

  record token_meta = {
    name      : string,
    symbol    : string,
    decimals  : int }

  record network = {
    id    : string,
    url   : string, 
    name  : string }

  stateful entrypoint init(): state = { 
    operator        = Call.caller,
    token_links     = [],
    bridge_entries  = [],
    processed_exits = [],
    token_ref       = Chain.create(
      "HyperchainBridgeToken", 18, "HBT", None): FungibleToken }

  entrypoint token_links(): list(token_link) = state.token_links
  entrypoint bridge_entries(): list(bridge_entry) = state.bridge_entries
  entrypoint processed_exits(): list(exit_request) = state.processed_exits
  
  payable stateful entrypoint enter_bridge(
    amount: int,
    token_type: token_type,
    target_network: network, 
    token: option(FungibleToken)
    ): bridge_entry =
    require_not_same_network(target_network)

    switch(token_type)
      Native => 
        require_valid_amount(amount)
        Chain.spend(Contract.address, amount)
      Link => 
        require_token_link(token)
        Option.force(token).transfer_allowance(
          Call.caller, Contract.address, amount)
        Option.force(token).burn(amount)
      Standard => 
        require_standard_aex9(token)
        Option.force(token).transfer_allowance(
          Call.caller, Contract.address, amount)

    let idx = List.length(state.bridge_entries)
    let new_bridge_entry = { 
      idx = idx, 
      token = token, 
      amount = amount, 
      from = Call.caller, 
      token_type = token_type,
      target_network = target_network,
      exit_link = get_token_link(token) }

    put(state{bridge_entries = state.bridge_entries ++ [new_bridge_entry]})
    new_bridge_entry

  stateful entrypoint exit_bridge(request: exit_request, timestamp: int, sig: signature): token_link =
    verify_exit_request(request, timestamp, sig)

    let exit_link = 
      if (request.entry.token_type == Link)
        let _exit_link = Option.force(request.entry.exit_link)

        if (_exit_link.is_source_native) 
          Chain.spend(request.entry.from, request.entry.amount)
        else 
            Option.force(_exit_link.source_token) // check this line
              .mint(request.entry.from, request.entry.amount)

        _exit_link
      else
        switch(find_token_link(request))
          None => create_token_link_and_mint(request)
          Some(found) =>
            found.local_token.mint(request.entry.from, request.entry.amount)
            found
      
    put(state{processed_exits = state.processed_exits ++ [request]})
    exit_link


  stateful function create_token_link_and_mint(request: exit_request) =
    let new_token = Chain.clone(
      ref=state.token_ref,
      String.concat("Bridged ", request.entry_token_meta.name), 
      request.entry_token_meta.decimals,
      String.concat("b", request.entry_token_meta.symbol),
      String.to_int(Int.to_str(request.entry.amount))): FungibleToken

    new_token.transfer(request.entry.from, request.entry.amount)

    let native_source = request.entry.token_type == Native
    let new_link = {
      local_token      = new_token, 
      source_token     = if (!native_source) request.entry.token else None,
      is_source_native = native_source,
      source_network   = request.entry_network }

    put(state{token_links = state.token_links ++ [new_link]})
    new_link


  function stringify_network_keys(network: network): string =
    String.concat(network.id, network.url)

  function stringify_token_meta(meta: token_meta): string =
    String.concats([
      meta.name,
      meta.symbol,
      Int.to_str(meta.decimals)])

  function stringify_token_link(_link: option(token_link)): string =
    if (Option.is_none(_link)) ""
    else
      let link = Option.force(_link)
      String.concats([
        get_token_contract_address_str(Some(link.local_token)),
        get_token_contract_address_str(link.source_token),
        stringify_network_keys(link.source_network),
        if (link.is_source_native) "true" else "false" ])

  function stringify_token_type(token_type: token_type): string =
    switch(token_type)
      Native => "native"
      Link => "link"
      Standard => "standard"

  function stringify_bridge_entry(entry: bridge_entry): string =
    String.concats([
      Int.to_str(entry.idx), 
      Address.to_str(entry.from),
      get_token_contract_address_str(entry.token),
      Int.to_str(entry.amount),
      stringify_token_link(entry.exit_link),
      stringify_token_type(entry.token_type),
      stringify_network_keys(entry.target_network)])

  entrypoint stringify_exit_request(request: exit_request, timestamp: int): string =
    let timed_exit_request_str = 
      String.concats([
        stringify_bridge_entry(request.entry),
        request.entry_tx_hash,
        stringify_network_keys(request.entry_network),
        stringify_token_meta(request.entry_token_meta),
        Int.to_str(timestamp) ])
      
    String.to_lower(timed_exit_request_str)


  function require_token_link(token: option(FungibleToken)) =
    require(has_token_linked(token), "NOT_LINKED_TOKEN")

  function require_operator() =
    require(Call.caller == state.operator, "ONLY_operator_CALL_ALLOWED")

  function require_standard_aex9(token: option(FungibleToken)) =
    require(List.contains(
      "allowances", 
      Option.force(token).aex9_extensions()), "TOKEN_NOT_STANDARD_AEX9")

  function require_valid_amount(amount: int) =
    require(amount > 0, "INVALID_AMOUNT")
    require(Call.value == amount, "CALL_VALUE_AND_AMOUNT_NOT_EQUAL")

  function require_not_same_network(target_network: network) =
    require(Chain.network_id != target_network.id, "SAME_NETWORK")

  function verify_exit_request(request: exit_request, timestamp: int, sig: signature) =
    require(Call.caller == request.entry.from, "WRONG_CALLER")
    require(request.entry.amount > 0, "AMOUNT_CANNOT_BE_ZERO")
    require(!check_request_processed(request), "ALREADY_PROCESSED")
    require(Chain.timestamp - timestamp < 60000, "TIMESTAMP_EXPIRED")
    require(Chain.network_id == request.entry.target_network.id, "BAD_TARGET_NETWORK")
    if (request.entry.token_type == Link)
      require(Option.is_some(request.entry.exit_link), 
        "EXIT_LINK_REQUIRED_FOR_LINKED_TOKEN")
    require(
      Crypto.verify_sig(
        String.to_bytes(stringify_exit_request(request, timestamp)), state.operator, sig), 
        "INVALID_SIGNATURE")

  function check_request_processed(request: exit_request) =
    List.find(
      (c) => c.entry.idx == request.entry.idx &&
        c.entry_tx_hash == request.entry_tx_hash &&
        c.entry.target_network.id == request.entry.target_network.id &&
        c.entry.target_network.url == request.entry.target_network.url
      ,state.processed_exits) != None

  entrypoint get_token_link(token: option(FungibleToken)) =
    if (Option.is_none(token)) None
    else List.find((p) => p.local_token == Option.force(token), state.token_links)

  entrypoint find_token_link(request: exit_request) =
    let is_source_native = request.entry.token_type == Native
    List.find(
      (t) => t.source_token == request.entry.token && 
        t.source_network.id == request.entry_network.id && 
        t.source_network.url == request.entry_network.url &&
        t.is_source_native == is_source_native
      ,state.token_links)
  
  function has_token_linked(token: option(FungibleToken)) =
    get_token_link(token) != None

  function get_token_contract_address_str(token: option(FungibleToken)): string = 
    if (Option.is_none(token)) ""
    else
      let _id = Pair.snd(String.split(2, Address.to_str(Option.force(token).address)))
      String.concat("ct", _id)